Dependencies.txt lists dependencies for files in this directory beyond those listed in the main directory (there are currently none).

concatenate_cell_contacts.py is a small utility that concatenates single-cell contacts into one file. It takes one command-line argument:
1) A directory containing only single-cell pairs.txt.gz files.
Output is written to STDOUT.

add_marginalized_counts.py is a utility that adds a column containing marginalized contact counts, and a binary column indicating whether the fragment has any contacts, to a generic list of genome fragments. It takes two command-line-arguments:
1) A generic file of fragments
2) A file of contact (pairwise) counts 
Both inputs are generated by fithic2 utilities (see below). Output is written to STDOUT.

collect_fithic_pvalues.py is a utility that collects p-values for the association between bins containing specific OCRs and specific genes from fithic output. It takes four command-line positional arguments:
1) A file with coordinates of a superset of the OCRS (format: chr start end OCR_name)
2) A file with each OCR of interest and all genes of interest near each OCR, one OCR per line
   (format: OCR_name,Gene1,Gene2,...)
3) A file with TSSs of a superset of the genes (format: chr position _ Gene)
4) The output of fithic
Output is written to STDOUT in tab-separated format.

collect_fithic_pvalues.py is a utility that assistsin the manual collection from the Hugin2 website (http://hugin2.genetics.unc.edu/Project/hugin/) of p-values for the association between bins containing specific OCRs and specific genes from fithic output. It prompts the user to for specific pairs of bins to collect, saves the provided data, and reports OCR-gene p-values. There is a provision in the code to hard-code specific OCRs to exclude due to having no/few neabry contacts. It takes four-five command-line positional arguments:
1-3) Same as for collect_fithic_pvalues.py
4) The file to write all collected data
5) (optional) Restart file: a file containing some previously-collected data, i.e. argument 4 of a previous run
Output is written to STDOUT in the same tab-separated format as collect_fithic_pvalues.py. 


Here is the workflow we used for computing DipC p-values, including the scripts above, fithic2 (1), and fithic2 utilities:
#Assuming all desired single-cell pairs.txt.gz files have been downloaded and are in cell_contacts/
#Concatenate:
python concatenate_cell_contats.py cell_contacts/ > concatenated_contats.txt

#Reorder and remove header:
#This reordering is for the particular dataset we used. In general, the final order of columns should be:
# readID chr1 pos1  strand1  chr2  pos2  strand2   ...
tail -n +26 concatenated_contats.txt | awk 'BEGIN {FS="\t"; OFS="\t"} {$1, $2, $3, $6, $4, $5, $7}' > concatenated_contats_reordered.txt 

#Count contacts for pairs of 10kb bins
bash fithic_utils/validPairs2FitHiC-fixedSize.sh 10000 example concatenated_contats_reordered.txt fithic_input/

#Create list of all 10kb bins in the mouse genome, given all chromosome lengths
python fithic_utils/createFitHiCFragments-fixedsize.py --chrLens mm10_lengths.txt --outFile fithic_input/mm10.fragments.gz --resolution 10000

#Add marginal counts to each bin
python add_marginalized_counts.py fithic_input/mm10.fragments.gz fithic_input/example.contactCounts.gz > fithic_input/example_fithic.fragmentCounts
gzip fithic_input/example_fithic.fragmentCounts

#Normalization. The % excluded (-x) needs to be tuned.
python fithic_utils/HiCKRy.py -i fithic_input/example_fithic.contactCounts.gz  -f fithic_input/example_fithic.fragmentCounts.gz -o fithic_input/example.biases.gz -x 0.05

#Compute p-values
fithic -i fithic_input/example_fithic.contactCounts.gz -f fithic_input/example_fithic.fragmentCounts.gz  -o fithic_output/ -r 10000 -U 2000000 -p 2 -l example_output_name -t fithic_input/example_biases.gz

#Collect p-values of specified OCRs and genes
python3 collect_fithic_pvalues.py mouse_OCR_coordinates.bed genes_near_ocrs.csv mouse_tss.bed fithic_output/example_output_name.spline_pass2.res10000.significances.txt.gz > ocr_gene_pvalues.txt


References:
1. A. Kaul, S. Bhattacharyya, F. Ay, Identifying statistically significant chromatin contacts from Hi-C data with FitHiC2. Nat. Protoc. 15(3), 991-1012 (2020).
